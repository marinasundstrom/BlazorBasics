@inject IJSRuntime JSRuntime

<h2>Find Pet</h2>

<p>Demonstrates C# passing an object reference to JavaScript, which then invokes a C# method on that object. 
    Using the method as a callback to pass complex data back to the component.</p>

@if (pet is not null)
{
    <h3>Pet</h3>

    <dl>
    <dt>Name</dt>
    <dd>@pet.Name</dd>

    <dt>Species</dt>
    <dd>@pet.Species</dd>

    <dt>Breed</dt>
    <dd>@pet.Breed</dd>

    <dt>Sex</dt>
    <dd>@pet.Sex</dd>

    <dt>Age</dt>
    <dd>@pet.Age</dd>
</dl>
}

<button class="btn btn-primary" @onclick="FindPet">Find pet (Callback 2s)</button>

@code {
    Pet? pet;

    async Task FindPet()
    {
        // Wrap PetFinder component in a reference, and pass to "findPet" function in JavaScript.
        // Response will passed to "OnPetFound" method, which is invoked from JavaScript.

        var componentRef = DotNetObjectReference.Create(this);

        await JSRuntime.InvokeVoidAsync("findPet", new object[] { componentRef });
    }

    [JSInvokable]
    public async Task OnPetFound(Pet pet)
    {
        this.pet = pet;

        StateHasChanged();
    }

    public record Pet(string Name, string Species, string Breed, string Sex, int Age);
}